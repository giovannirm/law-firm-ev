version: '3.8'

services:
  # node-service:
  #   image: custom-node:latest
  #   build:
  #     context: ./law-firm-ev-node
  #   container_name: node
  #   networks:
  #     - backend-net
  #     - frontend-net

  backend-service:
    # Le asigna el nombre de backend-app:prod a la imagen -t
    # image: backend-app:prod
    # Construye la imagen con docker-compose
    build: 
      context: ./law-firm-ev-backend
      dockerfile: ./docker/production.Dockerfile # -f
    # Utiliza el archivo .env para las variables de entorno
    env_file:
      - ./law-firm-ev-backend/.env
    # Nombre del contenedor --name
    container_name: bevprod
    # Nombre del host para que se pueda comunicar otros contenedores en vez de usar la ip
    hostname: bevprod
    # Se reiniciará a menos que se detenga
    restart: unless-stopped
    expose:
      - 3333
    # ports:
    #   - 3333:3333
    depends_on:
      - node-service
    # Puerto de la aplicación
    networks:
      - backend-net
    command: npm start

  frontend-service:
    # Le asigna el nombre de frontend-app:prod a la imagen -t
    # image: frontend-app:prod
    # Construye la imagen con docker-compose
    build: 
      context: ./law-firm-ev-frontend
      dockerfile: ./docker/production.Dockerfile # -f
    # Nombre del contenedor --name
    container_name: fevprod
    # Nombre del host para que se pueda comunicar otros contenedores en vez de usar la ip
    hostname: fevprod
    # Se reiniciará a menos que se detenga
    restart: unless-stopped
    # Puerto de la aplicación
    expose:
      - 4000
    # ports:
    #   - 4000:4000
    networks:
      - frontend-net
    depends_on:
      - backend-service
    command: npm run serve:ssr

  nginx-service:
    # image: nginx-app:prod
    build:
      context: ./law-firm-ev-nginx
    container_name: nginx
    restart: unless-stopped
    ports:
      - 80:80   # Puerto para http
      - 443:443 # Puerto para https
    volumes:
      - ./law-firm-ev-nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./law-firm-ev-nginx/certbot/conf:/etc/letsencrypt
      - ./law-firm-ev-nginx/certbot/www:/var/www/certbot
      - ./law-firm-ev-frontend/dist:/usr/share/nginx/html # Monta la carpeta de archivos estáticos de Angular
    depends_on:
      - backend-service
      - frontend-service
    networks:
      - backend-net
      - frontend-net

  certbot-service:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - ./law-firm-ev-nginx/certbot/conf:/etc/letsencrypt
      - ./law-firm-ev-nginx/certbot/www:/var/www/certbot
    # --email es el correo electronico para recibir notificaciones
    # --agree-tos acepta los terminos y condiciones
    # --no-eff-email no envia correos electronicos
    # --staging Esto le indica a Certbot que le gustaría utilizar el entorno de prueba de Let's Encrypt para obtener certificados de prueba. El uso de esta opción le permite probar sus opciones de configuración y evitar posibles límites de solicitud de dominio.
    # --force-renewal Esto le indicará a Certbot que desea solicitar un nuevo certificado con los mismos dominios que un certificado existente.
    command: certonly --webroot -w /var/www/certbot --force-renewal --email giovannirm.python@gmail.com -d api.bufetevaldivieso.com -d www.api.bufetevaldivieso.com -d bufetevaldivieso.com -d www.bufetevaldivieso.com --agree-tos --no-eff-email
    networks:
      - backend-net
      - frontend-net

networks:
  backend-net:
    driver: bridge
  frontend-net:
    driver: bridge